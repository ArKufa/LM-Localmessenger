const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors());
app.use(express.json());

// Supabase –∫–ª–∏–µ–Ω—Ç
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const activeUsers = new Map();
const userSockets = new Map();

// –ë–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
const systemBots = {
  'rp_helper': {
    name: 'RP Helper',
    character: '–°–∏—Å—Ç–µ–º–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫',
    avatar: 'ü§ñ',
    description: '–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ RP –ø—Ä–∞–≤–∏–ª–∞–º'
  },
  'game_master': {
    name: 'Game Master',
    character: '–ú–∞—Å—Ç–µ—Ä –ò–≥—Ä—ã',
    avatar: 'üéÆ',
    description: '–ì–µ–π–º–º–∞—Å—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞'
  },
  'event_bot': {
    name: 'Event Bot',
    character: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –°–æ–±—ã—Ç–∏–π',
    avatar: 'üéâ',
    description: '–ë–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ —Å–æ–±—ã—Ç–∏–π'
  }
};

// API Routes
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', message: 'LM-Local Messenger Server is running' });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/messages/:channel', async (req, res) => {
  try {
    const { channel } = req.params;
    
    const { data: messages, error } = await supabase
      .from('messages')
      .select('*')
      .eq('channel', channel)
      .order('created_at', { ascending: false })
      .limit(100);

    if (error) throw error;
    
    res.json(messages.reverse());
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/online-users', (req, res) => {
  const onlineUsers = Array.from(activeUsers.values());
  res.json(onlineUsers);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Socket.io —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
io.on('connection', (socket) => {
  console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —á–∞—Ç—É
  socket.on('user_join', async (userData) => {
    const user = {
      id: socket.id,
      username: userData.username,
      character: userData.character,
      avatar: userData.avatar || userData.username.charAt(0).toUpperCase(),
      joinedAt: new Date(),
      lastSeen: new Date()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    activeUsers.set(socket.id, user);
    userSockets.set(userData.username, socket.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Supabase
    await updateUserOnlineStatus(user, true);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    socket.broadcast.emit('user_joined', user);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const onlineUsers = Array.from(activeUsers.values());
    io.emit('online_users_update', onlineUsers);

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    const welcomeMessage = {
      id: Date.now(),
      sender: 'system',
      character: systemBots.rp_helper.character,
      avatar: systemBots.rp_helper.avatar,
      content: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, ${user.character}! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ RP.`,
      channel: 'general',
      created_at: new Date(),
      is_bot: true
    };

    socket.emit('new_message', welcomeMessage);
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.character} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  socket.on('send_message', async (messageData) => {
    try {
      const user = activeUsers.get(socket.id);
      if (!user) return;

      const message = {
        sender: user.username,
        character: user.character,
        avatar: user.avatar,
        content: messageData.content,
        channel: messageData.channel,
        created_at: new Date()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Supabase
      const { data: savedMessage, error } = await supabase
        .from('messages')
        .insert([message])
        .select()
        .single();

      if (error) throw error;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–∞–Ω–∞–ª–µ
      io.emit('new_message', savedMessage);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–æ–≤
      if (messageData.content.startsWith('/')) {
        handleBotCommand(messageData.content, user, socket);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      socket.emit('message_error', { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
    }
  });

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  socket.on('private_message', async (data) => {
    try {
      const fromUser = activeUsers.get(socket.id);
      const toSocketId = userSockets.get(data.toUser);

      if (toSocketId && fromUser) {
        const privateMessage = {
          id: Date.now(),
          from: fromUser.username,
          from_character: fromUser.character,
          to: data.toUser,
          content: data.content,
          created_at: new Date(),
          is_private: true
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const { error } = await supabase
          .from('private_messages')
          .insert([privateMessage]);

        if (error) throw error;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        io.to(toSocketId).emit('private_message_received', privateMessage);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        socket.emit('private_message_sent', privateMessage);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });

  // –°–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–∞
  socket.on('switch_channel', (data) => {
    const user = activeUsers.get(socket.id);
    if (user) {
      socket.join(data.channel);
      socket.emit('channel_switched', data.channel);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ –∫–∞–Ω–∞–ª–∞
      socket.to(data.channel).emit('user_channel_activity', {
        user: user.character,
        channel: data.channel,
        action: 'joined'
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', async () => {
    const user = activeUsers.get(socket.id);
    
    if (user) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      activeUsers.delete(socket.id);
      userSockets.delete(user.username);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Supabase
      await updateUserOnlineStatus(user, false);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      socket.broadcast.emit('user_left', user);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const onlineUsers = Array.from(activeUsers.values());
      io.emit('online_users_update', onlineUsers);

      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.character} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`);
    }
  });

  // –ü–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  socket.on('ping', () => {
    socket.emit('pong');
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–æ–≤
function handleBotCommand(command, user, socket) {
  const [cmd, ...args] = command.slice(1).split(' ');
  const response = {};

  switch (cmd.toLowerCase()) {
    case 'help':
      response.content = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/rules - –ü—Ä–∞–≤–∏–ª–∞ RP —Å–µ—Ä–≤–µ—Ä–∞
/roll [—á–∏—Å–ª–æ] - –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
/me [–¥–µ–π—Å—Ç–≤–∏–µ] - –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –ª–∏—Ü–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/time - –¢–µ–∫—É—â–µ–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
/weather - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
      `;
      response.bot = 'rp_helper';
      break;

    case 'rules':
      response.content = `
üìú –ü—Ä–∞–≤–∏–ª–∞ RP —Å–µ—Ä–≤–µ—Ä–∞:
1. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
2. –°–ª–µ–¥—É–π—Ç–µ –ª–æ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞
3. –ù–µ –º–µ—Ç–∞–≥–µ–π–º–∏—Ç—å
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /me –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∞!
      `;
      response.bot = 'rp_helper';
      break;

    case 'roll':
      const max = parseInt(args[0]) || 100;
      const result = Math.floor(Math.random() * max) + 1;
      response.content = `üé≤ ${user.character} –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫ D${max}: –≤—ã–ø–∞–ª–æ ${result}!`;
      response.bot = 'game_master';
      break;

    case 'me':
      const action = args.join(' ');
      response.content = `* ${user.character} ${action}`;
      response.bot = 'game_master';
      break;

    case 'time':
      const times = ['–£—Ç—Ä–æ', '–î–µ–Ω—å', '–í–µ—á–µ—Ä', '–ù–æ—á—å'];
      const randomTime = times[Math.floor(Math.random() * times.length)];
      response.content = `üïí –°–µ–π—á–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${randomTime}`;
      response.bot = 'game_master';
      break;

    case 'weather':
      const weathers = ['–°–æ–ª–Ω–µ—á–Ω–æ', '–î–æ–∂–¥–ª–∏–≤–æ', '–¢—É–º–∞–Ω–Ω–æ', '–ü–∞—Å–º—É—Ä–Ω–æ', '–í–µ—Ç—Ä–µ–Ω–æ'];
      const randomWeather = weathers[Math.floor(Math.random() * weathers.length)];
      response.content = `üå§Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${randomWeather}`;
      response.bot = 'game_master';
      break;

    default:
      response.content = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /${cmd}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`;
      response.bot = 'rp_helper';
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
  const botMessage = {
    id: Date.now(),
    sender: response.bot,
    character: systemBots[response.bot].character,
    avatar: systemBots[response.bot].avatar,
    content: response.content,
    channel: 'general',
    created_at: new Date(),
    is_bot: true
  };

  socket.emit('new_message', botMessage);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
async function updateUserOnlineStatus(user, isOnline) {
  try {
    const { error } = await supabase
      .from('users')
      .upsert({
        username: user.username,
        character: user.character,
        avatar: user.avatar,
        is_online: isOnline,
        last_seen: new Date()
      });

    if (error) throw error;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ LM-Local Messenger Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° WebSocket —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º`);
});
