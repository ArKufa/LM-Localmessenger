const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');
const axios = require('axios');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Discord Webhook URL (ะทะฐะผะตะฝะธัะต ะฝะฐ ัะฒะพะน)
const DISCORD_WEBHOOK_URL = process.env.DISCORD_WEBHOOK_URL || 'https://discord.com/api/webhooks/your-webhook-url';

// Discord Bot Token (ะพะฟัะธะพะฝะฐะปัะฝะพ)
const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;

// ะฅัะฐะฝะธะปะธัะต ะฒ ะฟะฐะผััะธ
const activeUsers = new Map();
const userSockets = new Map();
const messageHistory = {
  'general': [],
  'ooc': [],
  'faction': [],
  'trade': [],
  'events': []
};

// ะะฐะฝะฐะปั ะบะฐะบ ะฒ Discord
const channels = [
  { id: 'general', name: 'ะพะฑัะธะน-ัะฐั', icon: '๐ฌ', type: 'text' },
  { id: 'ooc', name: 'ะพะพั-ัะฐั', icon: '๐ญ', type: 'text' },
  { id: 'faction', name: 'ััะฐะบัะธะธ', icon: 'โ๏ธ', type: 'text' },
  { id: 'trade', name: 'ัะพัะณะพะฒะปั', icon: '๐ฐ', type: 'text' },
  { id: 'events', name: 'ะธะฒะตะฝัั', icon: '๐', type: 'text' },
  { id: 'voice', name: 'ะฒะพะนั-ัะฐั', icon: '๐', type: 'voice' }
];

// ะคัะฝะบัะธั ะพัะฟัะฐะฒะบะธ ัะพะพะฑัะตะฝะธั ะฒ Discord
async function sendToDiscord(messageData) {
  if (!DISCORD_WEBHOOK_URL || !DISCORD_WEBHOOK_URL.includes('discord.com')) return;

  try {
    const embed = {
      title: `๐ฌ ะะพะฒะพะต ัะพะพะฑัะตะฝะธะต ะฒ ${messageData.channel}`,
      description: messageData.content,
      color: 0x5865F2, // Discord blue
      fields: [
        {
          name: '๐ค ะัะฟัะฐะฒะธัะตะปั',
          value: `${messageData.character} (${messageData.sender})`,
          inline: true
        }
      ],
      timestamp: new Date().toISOString()
    };

    await axios.post(DISCORD_WEBHOOK_URL, {
      content: `๐จ **LM Messenger**: ${messageData.character} ะฝะฐะฟะธัะฐะป ะฒ ${messageData.channel}`,
      embeds: [embed]
    });
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ะพัะฟัะฐะฒะบะธ ะฒ Discord:', error.message);
  }
}

// ะคัะฝะบัะธั ะฟะพะปััะตะฝะธั ัะพะพะฑัะตะฝะธะน ะธะท Discord (ะตัะปะธ ะตััั ะฑะพั)
async function setupDiscordBot() {
  if (!DISCORD_BOT_TOKEN) return;

  try {
    // ะะดะตัั ะผะพะถะฝะพ ะฝะฐัััะพะธัั Discord Bot ะดะปั ะฟะพะปััะตะฝะธั ัะพะพะฑัะตะฝะธะน
    console.log('๐ค Discord Bot ะฟะพะดะบะปััะตะฝ');
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ะฟะพะดะบะปััะตะฝะธั Discord Bot:', error.message);
  }
}

// API Routes
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'LM-Local Messenger ั Discord ะธะฝัะตะณัะฐัะธะตะน',
    discord: DISCORD_WEBHOOK_URL ? 'Webhook ะฝะฐัััะพะตะฝ' : 'Webhook ะฝะต ะฝะฐัััะพะตะฝ',
    usersOnline: activeUsers.size,
    timestamp: new Date().toISOString()
  });
});

app.get('/api/channels', (req, res) => {
  res.json(channels);
});

app.get('/api/messages/:channel', (req, res) => {
  const { channel } = req.params;
  res.json(messageHistory[channel] || []);
});

app.get('/api/online-users', (req, res) => {
  const onlineUsers = Array.from(activeUsers.values());
  res.json(onlineUsers);
});

// Socket.io ัะพะตะดะธะฝะตะฝะธั
io.on('connection', (socket) => {
  console.log('๐ ะะพะฒะพะต ะฟะพะดะบะปััะตะฝะธะต:', socket.id);

  socket.on('user_join', async (userData) => {
    const user = {
      id: socket.id,
      username: userData.username,
      character: userData.character,
      avatar: userData.avatar || userData.username.charAt(0).toUpperCase(),
      status: 'online',
      joinedAt: new Date()
    };

    activeUsers.set(socket.id, user);
    userSockets.set(userData.username, socket.id);

    // ะัะฟัะฐะฒะปัะตะผ ัะฒะตะดะพะผะปะตะฝะธะต ะฒ Discord ะพ ะฝะพะฒะพะผ ะฟะพะปัะทะพะฒะฐัะตะปะต
    if (DISCORD_WEBHOOK_URL) {
      try {
        await axios.post(DISCORD_WEBHOOK_URL, {
          content: `๐ข **${user.character}** ะฟัะธัะพะตะดะธะฝะธะปัั ะบ LM Messenger`
        });
      } catch (error) {
        console.error('ะัะธะฑะบะฐ ะพัะฟัะฐะฒะบะธ ะฒ Discord:', error.message);
      }
    }

    socket.broadcast.emit('user_joined', user);
    io.emit('online_users_update', Array.from(activeUsers.values()));

    // ะัะธะฒะตัััะฒะตะฝะฝะพะต ัะพะพะฑัะตะฝะธะต
    const welcomeMessage = {
      id: Date.now(),
      sender: 'system',
      character: 'ะกะธััะตะผะฐ',
      avatar: '๐ค',
      content: `ะะพะฑัะพ ะฟะพะถะฐะปะพะฒะฐัั ะฒ ัะฐั, **${user.character}**! ๐`,
      channel: 'general',
      created_at: new Date().toISOString(),
      is_system: true
    };

    if (!messageHistory.general) messageHistory.general = [];
    messageHistory.general.push(welcomeMessage);
    socket.emit('new_message', welcomeMessage);

    console.log(`โ ${user.character} ะฟัะธัะพะตะดะธะฝะธะปัั ะบ ัะฐัั`);
  });

  socket.on('send_message', async (messageData) => {
    const user = activeUsers.get(socket.id);
    if (!user) return;

    const message = {
      id: Date.now(),
      sender: user.username,
      character: user.character,
      avatar: user.avatar,
      content: messageData.content,
      channel: messageData.channel || 'general',
      created_at: new Date().toISOString(),
      is_system: false
    };

    // ะกะพััะฐะฝัะตะผ ัะพะพะฑัะตะฝะธะต
    const channel = messageData.channel || 'general';
    if (!messageHistory[channel]) messageHistory[channel] = [];
    messageHistory[channel].push(message);

    // ะัะฟัะฐะฒะปัะตะผ ะฒัะตะผ ะฒ ะผะตััะตะฝะดะถะตัะต
    io.emit('new_message', message);

    // ะัะฟัะฐะฒะปัะตะผ ะฒ Discord
    await sendToDiscord(message);

    // ะะฑัะฐะฑะพัะบะฐ ะบะพะผะฐะฝะด
    if (messageData.content.startsWith('/')) {
      handleCommand(messageData.content, user, socket);
    }
  });

  socket.on('disconnect', () => {
    const user = activeUsers.get(socket.id);
    if (user) {
      activeUsers.delete(socket.id);
      userSockets.delete(user.username);

      // ะฃะฒะตะดะพะผะปะตะฝะธะต ะพ ะฒััะพะดะต ะฒ Discord
      if (DISCORD_WEBHOOK_URL) {
        axios.post(DISCORD_WEBHOOK_URL, {
          content: `๐ด **${user.character}** ะฟะพะบะธะฝัะป LM Messenger`
        }).catch(console.error);
      }

      socket.broadcast.emit('user_left', user);
      io.emit('online_users_update', Array.from(activeUsers.values()));

      console.log(`๐ ${user.character} ะฟะพะบะธะฝัะป ัะฐั`);
    }
  });
});

// ะะฑัะฐะฑะพัะบะฐ ะบะพะผะฐะฝะด
function handleCommand(command, user, socket) {
  const [cmd, ...args] = command.slice(1).split(' ');
  let response = '';

  switch (cmd.toLowerCase()) {
    case 'help':
      response = `**๐ ะะพัััะฟะฝัะต ะบะพะผะฐะฝะดั:**\n\`/help\` - ะกะฟะธัะพะบ ะบะพะผะฐะฝะด\n\`/online\` - ะะฝะปะฐะนะฝ ะฟะพะปัะทะพะฒะฐัะตะปะธ\n\`/roll [ัะธัะปะพ]\` - ะัะพัะพะบ ะบัะฑะธะบะฐ\n\`/me [ะดะตะนััะฒะธะต]\` - RP ะดะตะนััะฒะธะต`;
      break;
    case 'online':
      const onlineCount = activeUsers.size;
      const users = Array.from(activeUsers.values()).map(u => u.character).join(', ');
      response = `**๐ฅ ะะฝะปะฐะนะฝ: ${onlineCount}**\n${users}`;
      break;
    case 'roll':
      const max = parseInt(args[0]) || 100;
      const result = Math.floor(Math.random() * max) + 1;
      response = `๐ฒ **${user.character}** ะฑัะพัะฐะตั ะบัะฑะธะบ: **${result}**`;
      break;
    case 'me':
      const action = args.join(' ');
      response = `* **${user.character}** ${action}`;
      break;
    default:
      response = `โ ะะตะธะทะฒะตััะฝะฐั ะบะพะผะฐะฝะดะฐ: \`/${cmd}\``;
  }

  const systemMessage = {
    id: Date.now(),
    sender: 'system',
    character: 'ะกะธััะตะผะฐ',
    avatar: 'โ๏ธ',
    content: response,
    channel: 'general',
    created_at: new Date().toISOString(),
    is_system: true
  };

  if (!messageHistory.general) messageHistory.general = [];
  messageHistory.general.push(systemMessage);
  socket.emit('new_message', systemMessage);
}

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`๐ LM-Local Messenger ั Discord ะธะฝัะตะณัะฐัะธะตะน ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`);
  console.log(`๐ URL: http://localhost:${PORT}`);
  console.log(`๐ฌ Discord Webhook: ${DISCORD_WEBHOOK_URL ? 'ะะฐัััะพะตะฝ' : 'ะะต ะฝะฐัััะพะตะฝ'}`);
  setupDiscordBot();
});
