const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors());
app.use(express.json());

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ public –∏ —Ñ–∞–π–ª–æ–≤
const publicDir = path.join(__dirname, 'public');
console.log('üìÅ Public directory path:', publicDir);

// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(publicDir));

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
let supabase = null;
try {
  const { createClient } = require('@supabase/supabase-js');
  const SUPABASE_URL = process.env.SUPABASE_URL;
  const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;
  
  if (SUPABASE_URL && SUPABASE_ANON_KEY) {
    supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } else {
    console.log('‚ö†Ô∏è Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
  }
} catch (error) {
  console.log('‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
const activeUsers = new Map();
const userSockets = new Map();
const messageHistory = {
  'general': [],
  'ooc': [],
  'faction': [],
  'trade': [],
  'events': []
};

// –ë–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
const systemBots = {
  'rp_helper': {
    name: 'RP Helper',
    character: '–°–∏—Å—Ç–µ–º–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫',
    avatar: 'ü§ñ',
    description: '–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ RP –ø—Ä–∞–≤–∏–ª–∞–º'
  },
  'game_master': {
    name: 'Game Master',
    character: '–ú–∞—Å—Ç–µ—Ä –ò–≥—Ä—ã',
    avatar: 'üéÆ',
    description: '–ì–µ–π–º–º–∞—Å—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞'
  }
};

// –ö–∞–Ω–∞–ª—ã
const channels = [
  { id: 'general', name: '–û–±—â–∏–π —á–∞—Ç', description: '–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è' },
  { id: 'ooc', name: 'OOC —á–∞—Ç', description: 'Out of Character –æ–±—â–µ–Ω–∏–µ' },
  { id: 'faction', name: '–§—Ä–∞–∫—Ü–∏–∏', description: '–û–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ—Ä–∞–∫—Ü–∏—è–º–∏' },
  { id: 'trade', name: '–¢–æ—Ä–≥–æ–≤–ª—è', description: '–¢–æ—Ä–≥–æ–≤–ª—è –∏ –æ–±–º–µ–Ω' },
  { id: 'events', name: '–°–æ–±—ã—Ç–∏—è', description: '–ò–≤–µ–Ω—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' }
];

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
const database = {
  async saveUser(user) {
    if (supabase) {
      try {
        const { error } = await supabase
          .from('users')
          .upsert({
            username: user.username,
            character: user.character,
            avatar: user.avatar,
            is_online: true,
            last_seen: new Date().toISOString()
          });
        return !error;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase:', error.message);
        return false;
      }
    }
    return true;
  },

  async saveMessage(message) {
    if (supabase) {
      try {
        const { data, error } = await supabase
          .from('messages')
          .insert([message])
          .select()
          .single();
        return { data, error };
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Supabase:', error.message);
        return { error };
      }
    } else {
      const channel = message.channel || 'general';
      if (!messageHistory[channel]) messageHistory[channel] = [];
      
      const messageWithId = {
        ...message,
        id: Date.now() + Math.random()
      };
      
      messageHistory[channel].push(messageWithId);
      
      if (messageHistory[channel].length > 100) {
        messageHistory[channel] = messageHistory[channel].slice(-50);
      }
      
      return { data: messageWithId };
    }
  },

  async loadMessages(channel) {
    if (supabase) {
      try {
        const { data, error } = await supabase
          .from('messages')
          .select('*')
          .eq('channel', channel)
          .order('created_at', { ascending: true })
          .limit(100);
        return { data, error };
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Supabase:', error.message);
        return { error };
      }
    } else {
      return { data: messageHistory[channel] || [] };
    }
  },

  async updateUserOffline(username) {
    if (supabase) {
      try {
        const { error } = await supabase
          .from('users')
          .update({
            is_online: false,
            last_seen: new Date().toISOString()
          })
          .eq('username', username);
        return !error;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
        return false;
      }
    }
    return true;
  }
};

// API Routes
app.get('/api/health', async (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'LM-Local Messenger Server is running',
    database: supabase ? 'Supabase Connected' : 'In-Memory Mode',
    usersOnline: activeUsers.size,
    timestamp: new Date().toISOString()
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞–µ–º index.html
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
app.get('/api/channels', (req, res) => {
  res.json(channels);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/messages/:channel', async (req, res) => {
  try {
    const { channel } = req.params;
    const { data, error } = await database.loadMessages(channel);
    
    if (error) throw error;
    
    res.json(data || []);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/online-users', (req, res) => {
  const onlineUsers = Array.from(activeUsers.values());
  res.json(onlineUsers);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Socket.io —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
io.on('connection', (socket) => {
  console.log('üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

  socket.on('user_join', async (userData) => {
    try {
      const user = {
        id: socket.id,
        username: userData.username,
        character: userData.character,
        avatar: userData.avatar || userData.username.charAt(0).toUpperCase(),
        joinedAt: new Date(),
        lastSeen: new Date()
      };

      activeUsers.set(socket.id, user);
      userSockets.set(userData.username, socket.id);

      await database.saveUser(user);

      socket.broadcast.emit('user_joined', user);
      updateOnlineUsers();

      const welcomeMessage = {
        sender: 'system',
        character: systemBots.rp_helper.character,
        avatar: systemBots.rp_helper.avatar,
        content: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, ${user.character}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`,
        channel: 'general',
        created_at: new Date().toISOString(),
        is_bot: true
      };

      const { data: savedMessage } = await database.saveMessage(welcomeMessage);
      if (savedMessage) {
        socket.emit('new_message', savedMessage);
      }
      
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.character} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      socket.emit('join_error', { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É' });
    }
  });

  socket.on('send_message', async (messageData) => {
    try {
      const user = activeUsers.get(socket.id);
      if (!user) {
        socket.emit('message_error', { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        return;
      }

      const message = {
        sender: user.username,
        character: user.character,
        avatar: user.avatar,
        content: messageData.content,
        channel: messageData.channel || 'general',
        created_at: new Date().toISOString(),
        is_bot: false
      };

      const { data: savedMessage, error } = await database.saveMessage(message);

      if (error) throw error;

      io.emit('new_message', savedMessage || message);

      if (messageData.content.startsWith('/')) {
        handleBotCommand(messageData.content, user, socket);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      socket.emit('message_error', { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
    }
  });

  socket.on('disconnect', async () => {
    const user = activeUsers.get(socket.id);
    
    if (user) {
      activeUsers.delete(socket.id);
      userSockets.delete(user.username);

      await database.updateUserOffline(user.username);

      socket.broadcast.emit('user_left', user);
      updateOnlineUsers();

      console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.character} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`);
    }
  });

  socket.on('ping', () => {
    socket.emit('pong', { timestamp: new Date().toISOString() });
  });
});

function handleBotCommand(command, user, socket) {
  const [cmd, ...args] = command.slice(1).split(' ');
  const response = {};

  switch (cmd.toLowerCase()) {
    case 'help':
      response.content = `
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/rules - –ü—Ä–∞–≤–∏–ª–∞ RP —Å–µ—Ä–≤–µ—Ä–∞  
/roll [—á–∏—Å–ª–æ] - –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
/me [–¥–µ–π—Å—Ç–≤–∏–µ] - –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
/time - –¢–µ–∫—É—â–µ–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
/weather - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
/online - –°–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
      `;
      response.bot = 'rp_helper';
      break;

    case 'rules':
      response.content = `
üìú **–ü—Ä–∞–≤–∏–ª–∞ RP —Å–µ—Ä–≤–µ—Ä–∞:**
1. üé≠ –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö RP
2. üìñ –°–ª–µ–¥—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –ª–æ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞
3. üö´ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–∞–≥–µ–π–º–∏–Ω–≥
4. üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /me –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
5. ‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∞!
      `;
      response.bot = 'rp_helper';
      break;

    case 'roll':
      const max = parseInt(args[0]) || 100;
      const result = Math.floor(Math.random() * max) + 1;
      response.content = `üé≤ **${user.character}** –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫ D${max}: **${result}**!`;
      response.bot = 'game_master';
      break;

    case 'me':
      const action = args.join(' ');
      if (!action) {
        response.content = '‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /me [–¥–µ–π—Å—Ç–≤–∏–µ]';
        response.bot = 'rp_helper';
      } else {
        response.content = `* **${user.character}** ${action}`;
        response.bot = 'game_master';
      }
      break;

    case 'time':
      const times = ['üåÖ –£—Ç—Ä–æ', '‚òÄÔ∏è –î–µ–Ω—å', 'üåá –í–µ—á–µ—Ä', 'üåô –ù–æ—á—å'];
      const randomTime = times[Math.floor(Math.random() * times.length)];
      response.content = `üïí –°–µ–π—á–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${randomTime}`;
      response.bot = 'game_master';
      break;

    case 'weather':
      const weathers = ['‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–æ', 'üåßÔ∏è –î–æ–∂–¥–ª–∏–≤–æ', 'üå´Ô∏è –¢—É–º–∞–Ω–Ω–æ', '‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ', 'üí® –í–µ—Ç—Ä–µ–Ω–æ'];
      const randomWeather = weathers[Math.floor(Math.random() * weathers.length)];
      response.content = `üå§Ô∏è –ü–æ–≥–æ–¥–∞: ${randomWeather}`;
      response.bot = 'game_master';
      break;

    case 'online':
      const onlineCount = activeUsers.size;
      const usersList = Array.from(activeUsers.values()).map(u => u.character).join(', ');
      response.content = `üë• **–û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤:** ${onlineCount}\n${usersList}`;
      response.bot = 'rp_helper';
      break;

    default:
      response.content = `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: **/${cmd}**. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **/help** –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`;
      response.bot = 'rp_helper';
  }

  sendBotMessage(response.bot, response.content, socket);
}

async function sendBotMessage(botId, content, socket) {
  const bot = systemBots[botId];
  if (!bot) return;

  const botMessage = {
    sender: botId,
    character: bot.character,
    avatar: bot.avatar,
    content: content,
    channel: 'general',
    created_at: new Date().toISOString(),
    is_bot: true
  };

  const { data: savedMessage } = await database.saveMessage(botMessage);
  if (savedMessage) {
    socket.emit('new_message', savedMessage);
  }
}

function updateOnlineUsers() {
  const onlineUsers = Array.from(activeUsers.values());
  io.emit('online_users_update', onlineUsers);
}

const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
  console.log(`üöÄ LM-Local Messenger Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° WebSocket —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º`);
  console.log(`üåê URL: http://localhost:${PORT}`);
  console.log(`üíæ –†–µ–∂–∏–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${supabase ? 'Supabase' : 'In-Memory'}`);
});
